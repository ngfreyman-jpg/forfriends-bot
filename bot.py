import os
import json
import time
import logging
from urllib.request import urlopen, Request
from urllib.parse import urlencode

import telebot
from telebot import types

# ---------- –∫–æ–Ω—Ñ–∏–≥ ----------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CATALOG_WEBAPP_URL = os.getenv("CATALOG_WEBAPP_URL", "").strip()
SELLER_CHAT_ID = os.getenv("SELLER_CHAT_ID", "").strip()  # —Å—Ç—Ä–æ–∫–æ–π –æ–∫

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is empty")
if not CATALOG_WEBAPP_URL:
    raise RuntimeError("CATALOG_WEBAPP_URL is empty")
if not SELLER_CHAT_ID:
    raise RuntimeError("SELLER_CHAT_ID is empty")

# ---------- –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s",
)
log = logging.getLogger("bot")

# ---------- –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ----------
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML", threaded=True)

# ---------- —É—Ç–∏–ª–∏—Ç—ã ----------
def tg_api_call(method: str, params: dict = None):
    """
    –ü—Ä—è–º–∞—è —Ä–∞–±–æ—Ç–∞ —Å Telegram API –±–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –ª–∏–± (—á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ
    —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ —Å drop_pending_updates –∏ –Ω–µ –ª–æ–≤–∏—Ç—å –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–∏–≥–Ω–∞—Ç—É—Ä).
    """
    params = params or {}
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/{method}"
    if params:
        url = f"{url}?{urlencode(params)}"
    req = Request(url, headers={"User-Agent": "bot"})
    with urlopen(req, timeout=10) as resp:
        raw = resp.read().decode("utf-8")
    try:
        return json.loads(raw)
    except Exception:
        return {"ok": False, "raw": raw}

def safe_delete_webhook():
    # 1) –∂—ë—Å—Ç–∫–æ —É–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ —Å drop_pending_updates=true
    try:
        r = tg_api_call("deleteWebhook", {"drop_pending_updates": "true"})
        log.info(f"deleteWebhook -> {r}")
    except Exception as e:
        log.warning(f"deleteWebhook failed: {e}")
    # 2) –ø—Ä–æ–≤–µ—Ä–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    try:
        info = tg_api_call("getWebhookInfo")
        log.info(f"getWebhookInfo -> {info}")
    except Exception as e:
        log.warning(f"getWebhookInfo failed: {e}")

# ---------- –∫–æ–º–∞–Ω–¥—ã ----------
@bot.message_handler(commands=["start"])
def cmd_start(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥", web_app=types.WebAppInfo(CATALOG_WEBAPP_URL)))
    bot.reply_to(
        message,
        "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞—é –∑–∞–∫–∞–∑—ã.\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥.",
        reply_markup=kb,
    )

@bot.message_handler(commands=["ping"])
def cmd_ping(message: types.Message):
    bot.reply_to(message, "pong")

@bot.message_handler(commands=["test_seller"])
def cmd_test_seller(message: types.Message):
    # –ø—Ä–æ–±—Ä–æ—Å–∏–º –ø—Ä–æ—Å—Ç—É—é —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É –ø—Ä–æ–¥–∞–≤—Ü—É
    text = f"Test message from user <b>{message.from_user.id}</b>"
    try:
        bot.send_message(int(SELLER_CHAT_ID), text)
        bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤–∏–ª –ø—Ä–æ–¥–∞–≤—Ü—É ‚úîÔ∏è")
    except Exception as e:
        log.exception("send test to seller failed")
        bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É: {e}")

# ---------- –ø—Ä–∏—ë–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp (–∫–Ω–æ–ø–∫–∞ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É¬ª/submit) ----------
@bot.message_handler(content_types=["web_app_data"])
def handle_webapp_data(message: types.Message):
    # message.web_app_data.data ‚Äî —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞; –ø–æ–ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
    raw = message.web_app_data.data
    try:
        data = json.loads(raw)
    except Exception:
        data = {"raw": raw}

    # —Å–æ–±–µ—Ä—ë–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É
    pretty = json.dumps(data, ensure_ascii=False, indent=2)
    user = message.from_user
    header = (
        f"üßæ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n"
        f"from: <a href=\"tg://user?id={user.id}\">{user.first_name or ''}</a> (id: <code>{user.id}</code>)\n"
        f"username: @{user.username if user.username else '‚Äî'}\n"
    )
    body = f"<pre>{pretty}</pre>"

    try:
        bot.send_message(int(SELLER_CHAT_ID), header + body, disable_web_page_preview=True)
        bot.reply_to(message, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—É –∫–Ω–æ–ø–∫–æ–π ¬´–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥¬ª.")
    except Exception as e:
        log.exception("send order to seller failed")
        bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü—É: {e}")

# ---------- –∑–∞–ø—É—Å–∫ ----------
if __name__ == "__main__":
    log.info("starting‚Ä¶")
    safe_delete_webhook()  # –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –≤–µ–±—Ö—É–∫ –∏ –≤–∏—Å—è—â–∏–µ –∞–ø–¥–µ–π—Ç—ã
    # –¥–∞—ë–º —á—É—Ç—å-—á—É—Ç—å –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã —É —Ç–µ–ª–µ–≥–∏ ¬´–æ—Ç–ø—É—Å—Ç–∏–ª–æ¬ª
    time.sleep(1)

    # –≤–∞–∂–Ω–æ–µ: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∞–ø–¥–µ–π—Ç—ã –∏ —è–≤–Ω–æ –∑–∞–¥–∞—ë–º —Ç–∞–π–º–∞—É—Ç—ã
    bot.infinity_polling(
        timeout=10,
        long_polling_timeout=20,
        skip_pending=True,          # üí° —á—Ç–æ–±—ã –Ω–µ –≤—ã–µ–¥–∞–ª–∏—Å—å —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã
        allowed_updates=["message", "web_app_data"],
    )
