import os
import json
import time
import logging
from urllib.request import urlopen, Request
from urllib.parse import urlencode

import telebot
from telebot import types

# ---------- –∫–æ–Ω—Ñ–∏–≥ ----------
BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
CATALOG_WEBAPP_URL = os.getenv("CATALOG_WEBAPP_URL", "").strip()
SELLER_CHAT_ID = os.getenv("SELLER_CHAT_ID", "").strip()  # —Å—Ç—Ä–æ–∫–æ–π –æ–∫

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is empty")
if not CATALOG_WEBAPP_URL:
    raise RuntimeError("CATALOG_WEBAPP_URL is empty")
if not SELLER_CHAT_ID:
    raise RuntimeError("SELLER_CHAT_ID is empty")

# ---------- –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
log = logging.getLogger("bot")

# ---------- –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ----------
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML", threaded=True)

# ---------- —É—Ç–∏–ª–∏—Ç—ã ----------
def tg_api_call(method: str, params: dict = None):
    """–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Telegram API (–¥–ª—è deleteWebhook/getWebhookInfo)."""
    params = params or {}
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/{method}"
    if params:
        url = f"{url}?{urlencode(params)}"
    req = Request(url, headers={"User-Agent": "forfriends-bot"})
    with urlopen(req, timeout=10) as resp:
        raw = resp.read().decode("utf-8")
    try:
        return json.loads(raw)
    except Exception:
        return {"ok": False, "raw": raw}

def safe_delete_webhook():
    # —Å–Ω—è—Ç—å –≤–µ–±—Ö—É–∫ –∏ –≤—ã–∫–∏–Ω—É—Ç—å —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã
    try:
        r = tg_api_call("deleteWebhook", {"drop_pending_updates": "true"})
        log.info("deleteWebhook -> %s", r)
    except Exception as e:
        log.warning("deleteWebhook failed: %s", e)
    try:
        info = tg_api_call("getWebhookInfo")
        log.info("getWebhookInfo -> %s", info)
    except Exception as e:
        log.warning("getWebhookInfo failed: %s", e)

# ---------- –∫–æ–º–∞–Ω–¥—ã ----------
@bot.message_handler(commands=["start"])
def cmd_start(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥", web_app=types.WebAppInfo(CATALOG_WEBAPP_URL)))
    bot.reply_to(
        message,
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥.",
        reply_markup=kb,
    )

@bot.message_handler(commands=["id"])
def cmd_id(message: types.Message):
    bot.reply_to(message, f"–í–∞—à chat_id: <code>{message.chat.id}</code>")

@bot.message_handler(commands=["ping"])
def cmd_ping(message: types.Message):
    bot.reply_to(message, "pong")

# ---------- –ø—Ä–∏—ë–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp (–∫–Ω–æ–ø–∫–∞ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É¬ª) ----------
@bot.message_handler(content_types=["web_app_data"])
def handle_webapp_data(message: types.Message):
    raw = message.web_app_data.data
    try:
        data = json.loads(raw)
    except Exception:
        data = {"raw": raw}

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É: –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π JSON
    pretty = json.dumps(data, ensure_ascii=False, indent=2)
    user = message.from_user
    header = (
        "üßæ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n"
        f"–ö–ª–∏–µ–Ω—Ç: <a href=\"tg://user?id={user.id}\">{user.first_name or ''}</a> "
        f"(id: <code>{user.id}</code>)\n"
        f"username: @{user.username if user.username else '‚Äî'}\n\n"
    )
    body = f"<pre>{pretty}</pre>"

    try:
        bot.send_message(int(SELLER_CHAT_ID), header + body, disable_web_page_preview=True)
        # –ü–æ–∫—É–ø–∞—Ç–µ–ª—é ‚Äî –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        bot.reply_to(message, "‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –°–ø–∞—Å–∏–±–æ!")
    except Exception as e:
        log.exception("send order to seller failed")
        bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü—É: {e}")

# (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –ª–æ–≥ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö ‚Äî –Ω–µ –º–µ—à–∞–µ—Ç –ª–æ–≥–∏–∫–µ)
@bot.message_handler(func=lambda m: True, content_types=[
    'text','web_app_data','photo','document','contact','location','venue',
    'sticker','audio','video','voice','dice','poll'
])
def _dbg_everything(message: types.Message):
    try:
        has_wad = bool(getattr(message, 'web_app_data', None) and getattr(message.web_app_data, 'data', None))
        logging.info("DBG: type=%s has_web_app_data=%s text=%r",
                     message.content_type, has_wad, (message.text or '')[:60])
    except Exception as e:
        logging.warning("DBG logger err: %s", e)

# ---------- –∑–∞–ø—É—Å–∫ ----------
if __name__ == "__main__":
    log.info("starting‚Ä¶")
    safe_delete_webhook()           # –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –≤–µ–±—Ö—É–∫ –∏ —Ö–≤–æ—Å—Ç—ã
    time.sleep(0.5)

    # —Å—Ç–∞–±–∏–ª—å–Ω—ã–π polling –±–µ–∑ —Å–ø–æ—Ä–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    while True:
        try:
            bot.infinity_polling(
                skip_pending=True,
                timeout=10,
                long_polling_timeout=20,
            )
            time.sleep(1)  # –µ—Å–ª–∏ –≤–Ω–µ–∑–∞–ø–Ω–æ –≤—ã—à–ª–∏ ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–º —Ü–∏–∫–ª
        except telebot.apihelper.ApiTelegramException as e:
            # —Ç–∏–ø–∏—á–Ω—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç 409 ‚Äî –ø–æ–¥–æ–∂–¥—ë–º –∏ –ø–æ–≤—Ç–æ—Ä–∏–º
            if "409" in str(e) or "terminated by other getUpdates" in str(e):
                logging.error("409 conflict: waiting 5s and retry‚Ä¶")
                try: bot.stop_polling()
                except Exception: pass
                time.sleep(5)
                continue
            logging.exception("Telegram API error, retry in 5s")
            time.sleep(5)
        except Exception:
            logging.exception("Bot crashed, restart in 5s")
            try: bot.stop_polling()
            except Exception: pass
            time.sleep(5)
