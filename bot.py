import os
import time
import logging
import requests
import telebot
from telebot.apihelper import ApiException

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s"
)
log = logging.getLogger("bot")

TOKEN = os.getenv("BOT_TOKEN", "").strip()
CATALOG_WEBAPP_URL = os.getenv("CATALOG_WEBAPP_URL", "").strip()
SELLER_CHAT_ID = os.getenv("SELLER_CHAT_ID", "").strip()

if not TOKEN:
    raise RuntimeError("BOT_TOKEN is empty")

# parse_mode –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
bot = telebot.TeleBot(TOKEN, parse_mode="HTML", skip_pending=True)

def tg(method: str, **params):
    url = f"https://api.telegram.org/bot{TOKEN}/{method}"
    r = requests.get(url, params=params, timeout=15)
    r.raise_for_status()
    return r.json()

def remove_webhook_hard():
    try:
        before = tg("getWebhookInfo")
        log.info("Webhook info BEFORE: %s", before)
    except Exception as e:
        log.warning("getWebhookInfo failed before: %s", e)

    # –î–∞–∂–µ –µ—Å–ª–∏ –ª–∏–±–∞ —Å—Ç–∞—Ä–∞—è ‚Äî —Å–Ω–∏–º–µ–º –≤–µ–±—Ö—É–∫ —Ä—É–∫–∞–º–∏
    try:
        res = tg("deleteWebhook", drop_pending_updates="true")
        log.info("deleteWebhook: %s", res)
    except Exception as e:
        log.warning("deleteWebhook failed: %s", e)

    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã —Ç–µ–ª–µ–≥–∞ –∑–∞–∫—Ä—ã–ª–∞ –ø—Ä–µ–∂–Ω–∏–π long-poll
    time.sleep(1.5)

    try:
        after = tg("getWebhookInfo")
        log.info("Webhook info AFTER: %s", after)
    except Exception as e:
        log.warning("getWebhookInfo failed after: %s", e)

@bot.message_handler(commands=["start"])
def on_start(m: telebot.types.Message):
    text = "üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞—é –∑–∞–∫–∞–∑—ã."
    if CATALOG_WEBAPP_URL:
        # –ö–Ω–æ–ø–∫–∞ Web App, –µ—Å–ª–∏ –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–≤–æ—ë–º —Ñ—Ä–æ–Ω—Ç–µ
        kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn = telebot.types.KeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥", web_app=telebot.types.WebAppInfo(CATALOG_WEBAPP_URL))
        kb.add(btn)
        bot.reply_to(m, text, reply_markup=kb)
    else:
        bot.reply_to(m, text)

@bot.message_handler(commands=["ping"])
def on_ping(m: telebot.types.Message):
    bot.reply_to(m, "pong")

@bot.message_handler(commands=["test_seller"])
def on_test_seller(m: telebot.types.Message):
    if not SELLER_CHAT_ID:
        bot.reply_to(m, "SELLER_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω")
        return
    try:
        bot.send_message(int(SELLER_CHAT_ID), f"Test message from user {m.from_user.id}")
        bot.reply_to(m, "–û—Ç–ø—Ä–∞–≤–∏–ª –ø—Ä–æ–¥–∞–≤—Ü—É.")
    except Exception as e:
        log.exception("send to seller failed")
        bot.reply_to(m, f"–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É: {e}")

# –ï—Å–ª–∏ —É —Ç–µ–±—è –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç WebAppData –∏–∑ –∫–Ω–æ–ø–∫–∏ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É¬ª
@bot.message_handler(content_types=["web_app_data"])
def on_webapp(m: telebot.types.Message):
    data = m.web_app_data.data if m.web_app_data else ""
    if not data:
        bot.reply_to(m, "–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        return
    if SELLER_CHAT_ID:
        bot.send_message(int(SELLER_CHAT_ID), f"–ó–∞—è–≤–∫–∞ –æ—Ç {m.from_user.id}:\n{data}")
        bot.reply_to(m, "–û—Ç–ø—Ä–∞–≤–∏–ª –ø—Ä–æ–¥–∞–≤—Ü—É.")
    else:
        bot.reply_to(m, "SELLER_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –Ω–µ–∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å")

def run_polling_forever():
    # –°–Ω—è—Ç—å –≤–µ–±—Ö—É–∫ –ù–ê–î–Å–ñ–ù–û
    remove_webhook_hard()

    # –ö–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é –±–æ—Ç–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    try:
        bot.set_my_commands([
            telebot.types.BotCommand("start", "–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            telebot.types.BotCommand("ping", "–ø—Ä–æ–≤–µ—Ä–∫–∞"),
            telebot.types.BotCommand("test_seller", "—Ç–µ—Å—Ç –ø—Ä–æ–¥–∞–≤—Ü—É")
        ])
    except Exception:
        pass

    # –¶–∏–∫–ª —Å –∞–≤—Ç–æ—Ä–µ—Å—Ç–∞—Ä—Ç–æ–º –Ω–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç/—Å–µ—Ç—å
    while True:
        try:
            me = tg("getMe")
            log.info("getMe: id=%s username=@%s name=%s",
                     me.get("result", {}).get("id"),
                     me.get("result", {}).get("username"),
                     me.get("result", {}).get("first_name"))
        except Exception as e:
            log.warning("getMe failed: %s", e)

        log.info("START polling")
        try:
            # none_stop=True —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª –Ω–∞ handler-–∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö
            bot.infinity_polling(timeout=20, long_polling_timeout=20)
        except ApiException as e:
            # –ö–æ–Ω—Ñ–ª–∏–∫—Ç 409 ‚Äî –∫—Ç–æ-—Ç–æ –µ—â—ë –¥–µ—Ä–∂–∏—Ç long-poll. –ü–æ–¥–æ–∂–¥–∞—Ç—å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å.
            if getattr(e, "result", None) and getattr(e.result, "status_code", None) == 409:
                log.warning("409 Conflict (–∫—Ç–æ-—Ç–æ –µ—â—ë —á–∏—Ç–∞–µ—Ç getUpdates). –ñ–¥—É 65 —Å–µ–∫ –∏ –ø–æ–≤—Ç–æ—Ä—è—é‚Ä¶")
                time.sleep(65)
                continue
            log.exception("ApiException, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —á–µ—Ä–µ–∑ 10 —Å–µ–∫")
            time.sleep(10)
        except Exception:
            log.exception("Polling crashed, retry in 10s")
            time.sleep(10)

if __name__ == "__main__":
    run_polling_forever()
